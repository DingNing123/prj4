2022 12 18
(t18) mac@MacdeMacBook-Pro prj4 % git branch
* main

(t18) mac@MacdeMacBook-Pro prj4 % git remote -v
origin	https://github.com/DingNing123/prj4.git (fetch)
origin	https://github.com/DingNing123/prj4.git (push)

(t18) mac@MacdeMacBook-Pro prj4 % git add 1218.txt

(t18) mac@MacdeMacBook-Pro prj4 % git add README.md


(t18) mac@MacdeMacBook-Pro prj4 % git status -s
A  1218.txt
M  README.md
(t18) mac@MacdeMacBook-Pro prj4 % git commit -m '1218'
[main 95125c8] 1218
 2 files changed, 7 insertions(+)
 create mode 100644 1218.txt
(t18) mac@MacdeMacBook-Pro prj4 % git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

(t18) mac@MacdeMacBook-Pro prj4 % git log --oneline         
9c85001 (HEAD -> main) modify 1218
95125c8 (origin/main, origin/HEAD) 1218
bbcb378 Initial commit

(t18) mac@MacdeMacBook-Pro prj4 % git push origin main
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 455 bytes | 455.00 KiB/s, done.
Total 4 (delta 0), reused 0 (delta 0)
To https://github.com/DingNing123/prj4.git
   bbcb378..95125c8  main -> main

The last few references in the third paper have codes, and we can reproduce them
https://github.com/TmacMai/Multimodal-Information-Bottleneck

(t18) mac@MacdeMacBook-Pro Desktop % git clone https://github.com/TmacMai/Multimodal-Information-Bottleneck.git 
Cloning into 'Multimodal-Information-Bottleneck'...
remote: Enumerating objects: 119, done.
remote: Counting objects: 100% (20/20), done.
remote: Compressing objects: 100% (17/17), done.
remote: Total 119 (delta 9), reused 3 (delta 3), pack-reused 99
Receiving objects: 100% (119/119), 15.87 MiB | 115.00 KiB/s, done.
Resolving deltas: 100% (50/50), done.

ClashX needs to reload configuration files

pip install gdown
gdown https://drive.google.com/uc?id=12HbavGOtoVCqicvSYWl3zImli5Jz0Nou
gdown https://drive.google.com/uc?id=1VJhSc2TGrPU8zJSVTYwn5kfuG47VaNQ3

use google browser download

google drive couldn't open at first, but opened after a while

1. Chinese Multimodal Sarcasm Dataset
2. Reproduce the bottleneck Information bottleneck (IB)
3. GAN

信息瓶颈 (IB) 最初是针对信号处理提出的，旨在找到信号的较短版本，同时保留信号的最大信息 [8]。 最近，变分信息瓶颈 (VIB) [9] 弥合了 IB 和深度学习之间的差距，它近似于信息瓶颈约束并使 IB 能够适用于深度学习。 如今，由于其学习最小信息表示的能力，IB 和 VIB 已广泛应用于计算机视觉 [38]、强化学习 [39] 和自然语言处理 [40]。 我们的论文基于 VIB，针对多模态情感分析和情感识别调整和改进了 VIB。

Information bottleneck (IB)

multi-view learning

在所有 IB 变体中，旨在采用 IB 进行多视图学习的作品与我们的工作最相关 [41]-[45]。 李等。 [44]，吴等。 [43]，朱等人。 [45] 扩展 VIB 用于多视图学习，首先使用 VIB 约束每个视图的信息流，然后通过专家产品（PoE）[42] 获得联合表示。 同样，Wang 等人。 开发深度多视图 IB 理论，旨在最大化标签与学习的联合表示之间的互信息，并最小化每个视图的学习表示与原始表示之间的互信息 [46]。 所提出的方法与上述多视图 IB 方法的主要区别在于：1）我们开发了 E-MIB、L-MIB 和 C-MIB 来研究多模态信息瓶颈，而不是仅在每个模态上应用 IB 原理。 前瞻性地。 我们的方法设法通过 E-MIB 减少生成的多模态表示的冗余，并通过 L-MIB 过滤掉每种模态的噪声信息。 此外，C-MIB 设法结合了 L-MIB 和 E-MIB 的优点来规范化单峰和多峰表示。 总之，所提出的方法同时将 IB 原理应用于单模态表示学习和复杂的多模态表示学习，从而能够学习更具辨别力和表现力的特征； 2) 所提出的 MIB 变体是灵活的，因为它们可以集成任何融合机制，而不是像以前的多视图 IB 方法 [42]-[45] 那样仅应用 PoE。 这样，可以利用更复杂和有效的融合策略来提供更高的表达能力并探索更充分的多模态动力学，这在我们的实验中被证明是重要的（见第 IV-F 节）。 任何融合机制的兼容性是所提出的方法优于多视图 IB 方法的优点之一。 值得注意的是，Ma 等人。 [47] 提出了图像到语音合成的多模态信息瓶颈。 然而，[47]中的多模态信息瓶颈与我们的方法根本不同，其信息瓶颈主要是指设计的模型架构而不是 IB 原则。



2022 12 19

cannot import name 'swish' from 'transformers.activations'

.gitignore

git reset HEAD

https://github.com/huggingface/transformers/blob/main/src/transformers/activations.py

SiLUActivation

transformer version problem:

my version transformers 4.14.1

from transformers.models.bert.modeling_bert import BertPreTrainedModel

transformers=3.0.2=pypi_0

from transformers.modeling_bert import BertPreTrainedModel

ModuleNotFoundError: No module named ‘transformers.configuration_bert‘

transformers/models/bert/configuration_bert.py

dependent file : 
/Users/mac/Desktop/big_file/mosi.pkl

note_books/05.emib_debug.ipynb

git push origin main

Generate requirements

(t18) mac@MacdeMacBook-Pro prj4 % pip install pipreqs
Collecting pipreqs

(t18) mac@MacdeMacBook-Pro prj4 % pipreqs . --encoding=utf8 --force
INFO: Successfully saved requirements file in ./requirements.txt
(t18) mac@MacdeMacBook-Pro prj4 % 


2022 12 21.txt
google colab 读取python文件

2022  12月22日
解决python3.8 原地替换问题 
        # q *= self.scaling
        q = q * self.scaling
        

2023年 03月 01日 星期三 18:02:51 CST

/home/dn/Desktop/我的第四篇论文/prj4/txt/2023-3-1-wednesday.txxt

from readme 

## Question
1.I don't want to see a long output from bert, but I can print it to a file.
我不想看到transformers长输出问题
answer:
```python
        # export TRANSFORMERS_VERBOSITY=error
        # If you want to reduce the output of the logging warning level that comes with bert,
        # you need to export the environment variable, which is obtained from reading the source code.
```


## Appendix

### Que 1
transformer version problem:  my version transformers 4.14.1

from transformers.models.bert.modeling_bert import BertPreTrainedModel
 
transformers=3.0.2=pypi_0 

from transformers.modeling_bert import BertPreTrainedModel

2023年 03月 01日 星期三 18:20:54 CST
git push 需要配置  
[multimodal sarcasm deep learning](https://github.com/DingNing123/prj4)

(py37) dn@SSD-Panson:~/Desktop/我的第四篇论文/prj4$ git push origin main

(py37) dn@SSD-Panson:~/Desktop/我的第四篇论文/prj4$ git push origin main
Username for 'https://github.com': 754406193@qq.com
Password for 'https://754406193@qq.com@github.com': 
remote: Support for password authentication was removed on August 13, 2021.
remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.
fatal: Authentication failed for 'https://github.com/DingNing123/prj4.git/'


(py37) dn@SSD-Panson:~/Desktop/我的第四篇论文/prj4$  ssh -T git@github.com
Connection to ssh.github.com 443 port [tcp/https] succeeded!
Hi DingNing123! You've successfully authenticated, but GitHub does not provide shell access.


$ ssh -T git@github.com
1
测试一下通不通，通了显示如下：

Hi Hello! You've successfully authenticated, but GitHub does not provide shell access.

Ubuntu18.04解决github提交代码Support for password authentication was removed 问题
https://blog.csdn.net/weixin_42408707/article/details/122361445

(py37) dn@SSD-Panson:~/Desktop/我的第四篇论文/prj4$ git remote -v
origin	https://github.com/DingNing123/prj4.git (fetch)
origin	https://github.com/DingNing123/prj4.git (push)
(py37) dn@SSD-Panson:~/Desktop/我的第四篇论文/prj4$ git remote set-url origin git@github.com:DingNing123/prj4.git
(py37) dn@SSD-Panson:~/Desktop/我的第四篇论文/prj4$ git remote -v
origin	git@github.com:DingNing123/prj4.git (fetch)
origin	git@github.com:DingNing123/prj4.git (push)

2023年 03月 02日 星期四 18:01:45 CST
I will use pdf to record code. thank you txt file ~ 
but detail information will here, I cannot give up txt.
FileNotFoundError: [Errno 2] No such file or directory: '/Users/mac/Desktop/big_file/mosi.pkl'
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> /home/dn/Desktop/我的第四篇论文/prj4/main_prj4.py(296)set_up_data_loader()
    295     # /Users/mac/Desktop/big_file/mosi.pkl
--> 296     with open(f"/Users/mac/Desktop/big_file/{args.dataset}.pkl", "rb") as handle:
    297         data = pickle.load(handle)

(py37) dn@SSD-Panson:/media/dn/新加卷/deep_learning/第三篇论文大文件代码材料$ cp mosi.pkl /home/dn/Desktop/deep_learning_tools/
  File "/home/dn/Desktop/我的第四篇论文/prj4/main_prj4.py", line 132, in get_tokenizer
    return BertTokenizer.from_pretrained(bert_path)

dependent file 
/home/dn/Desktop/deep_learning_tools/bert-base-uncased
/home/dn/Desktop/deep_learning_tools/mosi.pkl

    # open cuda
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.enabled = False
    torch.backends.cudnn.deterministic = True

    # torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.benchmark = True
    # torch.backends.cudnn.enabled = False
    torch.backends.cudnn.enabled = True
    torch.backends.cudnn.deterministic = True


exit(0)
 line:359 

